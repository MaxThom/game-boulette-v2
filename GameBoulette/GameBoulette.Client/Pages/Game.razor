@page "/game/{gamecode}"
@inherits AppBaseComponent
@inject IJSRuntime js
@implements IDisposable
@inject NavigationManager NavigationManager
@inject GameHubService GameHub
@inject ClipboardService ClipboardService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

@if (GameHub.You != null)
{
<MudContainer MaxWidth="MaxWidth.Large" Class="mt-16">
    <MudText Typo="Typo.h4" Align="Align.Center" GutterBottom="true"><strong>@GameHub.Game.TeamOne.Name vs @GameHub.Game.TeamTwo.Name</strong></MudText>
    <MudText Align="Align.Center">@LanguageManager.CurrentLanguage.GamePage.RoundLabel #@GameHub.Game.CurrentGame.CurrentRound</MudText>    
    <MudGrid Class="mt-4" Justify="Justify.Center">        
        <MudItem xs="12" sm="3" md="3" Class="mx-auto">
            <MudItem Class="d-flex flex-column align-start px-1">
                <MudItem Class="d-flex flex-row justify-center">
                    <MudAvatar Class="my-auto mr-3" Color="Color.Inherit" Variant="Variant.Outlined">@GameHub.Game.TeamOne.Score</MudAvatar>
                    <MudText Class="my-auto" style="font-size: 1.5em;" Typo="Typo.overline">@LanguageManager.CurrentLanguage.GamePage.ScoreLabel</MudText>
                </MudItem>
                @foreach (var player in GameHub.Game.TeamOne.Players.Where(x => !string.IsNullOrEmpty(x.ConnectionId)))
                {
                    <MudItem Class="d-flex flex-row justify-center">
                        <MudButton Class="pa-2 ma-2 mx-auto" Variant="@(player.Id.Equals(GameHub.You.Id) ? Variant.Filled : Variant.Outlined)" Style="@(player.Id.Equals(GameHub.You.Id) ? "background-color: "+@player.Color+"; color: black;" : "color: "+@player.Color+"; border: 1px solid "+ @player.Color +";")">@player.Name</MudButton>
                        @if (GameUtility.IsYouCurrentPlayerTurn(player, GameHub.Game))
                        {
                            <MudIcon Class="my-auto ml-3" Size="Size.Large" Icon="@Icons.Material.Filled.ArrowBack" Title="Your Turn" />
                        }
                    </MudItem>
                }
            </MudItem>
        </MudItem>
         <MudItem xs="12" sm="6" md="6" Class="ma-auto">
             <MudPaper Elevation="25" Class="rounded-lg d-flex flex-column justify-space-around align-center" Style="height:300px;">                
                <MudText Class="mt-5" style="font-size: 1.5em;" Typo="Typo.overline">@timeLeft.ToString("mm\\:ss")</MudText>
                <MudButton Class="px-5 mt-n5" Style="min-width:75%" Variant="@(GameUtility.IsYouCurrentPlayerTurn(GameHub.You, GameHub.Game) ? Variant.Filled : Variant.Outlined)" Size="Size.Large" Color="Color.Info">@WordToDisplay()</MudButton>
                <MudItem Class="d-flex flex-row justify-center">
                    @if (GameUtility.IsYouCurrentPlayerTurn(GameHub.You, GameHub.Game))
                    {
                        @if (GameHub.Game.CurrentGame.TurnState == TurnState.Playing)
                        {
                            <MudButton Class="mx-12" Variant="Variant.Text" Color="Color.Warning" OnClick="OnSkipWordClick">@LanguageManager.CurrentLanguage.GamePage.SkipWord</MudButton>
                            <MudButton Class="mx-12" Variant="Variant.Text" Color="Color.Success" OnClick="OnFoundWordClick" Disabled="isWordFoundButtonDisabled">@LanguageManager.CurrentLanguage.GamePage.FoundWord</MudButton>
                        }
                        else if (GameHub.Game.CurrentGame.TurnState == TurnState.Waiting || GameHub.Game.CurrentGame.TurnState == TurnState.WaitingNextRound)
                        {                            
                            <MudButton Class="mx-12" Variant="Variant.Text" Color="Color.Warning" OnClick="OnStartTurnClick">@LanguageManager.CurrentLanguage.GamePage.StartTurn</MudButton>
                        }
                    }
                    else if (!string.IsNullOrEmpty(GameHub.Game.CurrentGame?.LatestWordFound?.Label))
                    {
                        <MudText Align="Align.Center" Typo="Typo.subtitle1" Color="Color.Info"><i>@LanguageManager.CurrentLanguage.GamePage.Latest:</i> @GameHub.Game.CurrentGame.LatestWordFound.Label</MudText>
                    }
                </MudItem>
            </MudPaper>
            <MudItem Class="d-flex flex-row justify-center">
                <MudText Class="my-auto" style="font-size: 1.5em;" Typo="Typo.overline">@GameHub.Game.CurrentGame.RemainingWords.Count @LanguageManager.CurrentLanguage.GamePage.RemaningWords</MudText>
            </MudItem>
        </MudItem>
         <MudItem xs="12" sm="3" md="3" Class="mx-auto">
            <MudItem Class="d-flex flex-column align-end flex-wrap py-2 px-1">
                <MudItem Class="d-flex flex-row justify-center">
                    <MudAvatar Class="my-auto mr-3" Color="Color.Inherit" Variant="Variant.Outlined">@GameHub.Game.TeamTwo.Score</MudAvatar>
                    <MudText Class="my-auto" style="font-size: 1.5em;" Typo="Typo.overline">@LanguageManager.CurrentLanguage.GamePage.ScoreLabel</MudText>
                </MudItem>
                @foreach (var player in GameHub.Game.TeamTwo.Players.Where(x => !string.IsNullOrEmpty(x.ConnectionId)))
                {
                    <MudItem Class="d-flex flex-row align-end">
                        @if (GameUtility.IsYouCurrentPlayerTurn(player, GameHub.Game))
                        {
                            <MudIcon Class="my-auto mr-3" Size="Size.Large" Icon="@Icons.Material.Filled.ArrowForward" Title="Your Turn" />
                        }
                        <MudButton Class="pa-2 ma-2 mx-auto" Variant="@(player.Id.Equals(GameHub.You.Id) ? Variant.Filled : Variant.Outlined)" Style="@(player.Id.Equals(GameHub.You.Id) ? "background-color: "+@player.Color+"; color: black;" : "color: "+@player.Color+"; border: 1px solid "+ @player.Color +";")">@player.Name</MudButton>                        
                    </MudItem>
                }
            </MudItem>
        </MudItem>
    </MudGrid>    
    <MudGrid Class="" Justify="Justify.Center">
        <MudItem xs="12" sm="12" md="12">
            <MudExpansionPanels>
                <MudExpansionPanel Text="" MaxHeight="150">
                    <TitleContent>
                        <MudItem class="d-flex">
                            <MudIcon Icon="@Icons.Material.Filled.Settings" class="mr-3"></MudIcon>
                            <MudText>@LanguageManager.CurrentLanguage.GameLobbyPage.ConfigurationLabel</MudText>
                        </MudItem>
                    </TitleContent>
                    <ChildContent>
                        <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors" Class="d-flex flex-row justify-center flex-wrap py-1 px-1">
                            <MudTextField Class="pa-1 ma-1" T="string" ReadOnly="true" Margin="Margin.Dense" @bind-Value="GameHub.Game.Config.Name" Label="@LanguageManager.CurrentLanguage.CreateGamePage.GameName" Variant="Variant.Outlined" Required="true" RequiredError="@LanguageManager.CurrentLanguage.CreateGamePage.MissingField" />
                            <MudTextField Class="pa-1 ma-1" T="string" ReadOnly="true" Margin="Margin.Dense" @bind-Value="GameHub.Game.Config.Theme" Label="@LanguageManager.CurrentLanguage.CreateGamePage.GameTheme" Variant="Variant.Outlined" />            
                            <MudNumericField Class="pa-1 ma-1" ReadOnly="true" Margin="Margin.Dense" @bind-Value="GameHub.Game.Config.NumberOfRound" Label="@LanguageManager.CurrentLanguage.CreateGamePage.NumberOfRound" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentText="@LanguageManager.CurrentLanguage.CreateGamePage.Rounds" Required="true" RequiredError="@LanguageManager.CurrentLanguage.CreateGamePage.MissingField"/> 
                            <MudNumericField Class="pa-1 ma-1" ReadOnly="true" Margin="Margin.Dense" @bind-Value="GameHub.Game.Config.TimePerTurn" Label="@LanguageManager.CurrentLanguage.CreateGamePage.TimePerTurn" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentText="@LanguageManager.CurrentLanguage.CreateGamePage.Seconds" Required="true" RequiredError="@LanguageManager.CurrentLanguage.CreateGamePage.MissingField"/>                        
                            <MudNumericField Class="pa-1 ma-1" ReadOnly="true" Margin="Margin.Dense" @bind-Value="GameHub.Game.Config.NumberOfPaperPerPerson" Label="@LanguageManager.CurrentLanguage.CreateGamePage.NumberOfPaper" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentText="@LanguageManager.CurrentLanguage.CreateGamePage.Papers" Required="true" RequiredError="@LanguageManager.CurrentLanguage.CreateGamePage.MissingField"/>                        
                            <MudTextField T="string" Class="pa-1 ma-1" ReadOnly="true" Margin="Margin.Dense" @bind-Value="GameHub.Game.Config.VideoUrl" Label="@LanguageManager.CurrentLanguage.CreateGamePage.VideoURL" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.ContentCopy" OnAdornmentClick="OnCopyVideoUrl"/>                        
                            <MudField Class="pa-1 ma-1" Label="@LanguageManager.CurrentLanguage.GameLobbyPage.GameUrl" Margin="Margin.Dense" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.ContentCopy" OnAdornmentClick="OnCopyGameUrl">localhost:5001/lobby/24f8bds34d=</MudField>
                        </MudForm>
                    </ChildContent>                    
                </MudExpansionPanel>
            </MudExpansionPanels>
            <MudExpansionPanel>
                <TitleContent>
                    <MudItem class="d-flex">
                        <MudIcon Icon="@Icons.Material.Filled.Accessibility" class="mr-3"></MudIcon>
                        <MudText>@LanguageManager.CurrentLanguage.GameLobbyPage.RulesLabel</MudText>
                    </MudItem>
                </TitleContent>
                <ChildContent>
                        <MudText Typo="Typo.body1">
                            <strong>
                                @LanguageManager.CurrentLanguage.RulesComponent.SetupHeader
                            </strong>
                        </MudText>
                        <MudText Typo="Typo.body1">
                            @((MarkupString)LanguageManager.CurrentLanguage.RulesComponent.Setup)
                        </MudText>
                        <br />
                        <MudText Typo="Typo.body1">
                            <strong>
                                @LanguageManager.CurrentLanguage.RulesComponent.UnfoldingHeader
                            </strong>
                        </MudText>
                        <MudText Typo="Typo.body1">                            
                           @((MarkupString)LanguageManager.CurrentLanguage.RulesComponent.Unfolding)
                        </MudText>
                        <br />
                        <MudText Typo="Typo.body1">
                            <strong>
                                @LanguageManager.CurrentLanguage.RulesComponent.RoundsHeader
                            </strong>
                        </MudText>
                        <MudText Typo="Typo.body1">
                            @((MarkupString)LanguageManager.CurrentLanguage.RulesComponent.Rounds)
                        </MudText>                        
                    </ChildContent>                    
            </MudExpansionPanel>
        </MudItem>
    </MudGrid>
    <MudGrid Class="" Justify="Justify.Center">
        <MudItem xs="12" sm="12" md="12">
            <MudButton Variant="Variant.Outlined" Color="Color.Tertiary" OnClick="NavigateToIndexComponent" Class="pa-2 ml-2 mr-auto">@LanguageManager.CurrentLanguage.GameLobbyPage.Leave</MudButton>
        </MudItem>
    </MudGrid>
</MudContainer>
}
@code {
    [Parameter]
    public string GameCode { get; set; }
    bool success;
    string[] errors = { };
    MudForm form;
    TimeSpan timeLeft = new TimeSpan();
    bool isTimerEnabled = false;
    string currentWord = "';..;'";
    int currentWordIndex = -1;
    Dictionary<string, string> currentSkippedWords = new Dictionary<string, string>();
    Random random = new Random();
    bool isWordFoundButtonDisabled = false;

    protected override void OnParametersSet()
    {
        Console.WriteLine(ObjectDumper.Dump(GameHub.You));
        if (GameHub.You == null)
        {
            NavigationManager.NavigateTo($"/{GameCode}");
        }
        else if (GameHub?.Game?.Config != null)
        {
            timeLeft = new TimeSpan(0, 0, GameHub.Game.Config.TimePerTurn);         
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (GameHub.Game == null || !GameHub.IsConnected)
            NavigationManager.NavigateTo($"/{GameCode}");

        GameHub.OnGameRoomUpdate += GameHub_OnGameRoomUpdate;
        GameHub.OnStartTimerEvent += GameHub_OnStartTimerEvent;
        GameHub.OnStopTimerEvent += GameHub_OnStopTimerEvent;
        GameHub.OnResetTimerEvent += GameHub_OnResetTimerEvent;
        GameHub.OnPlayerTurnWaitEvent += GameHub_OnPlayerTurnWait;
        GameHub.OnGameCompletedEvent += GameHub_OnGameCompletedEvent;
    }

    private void GameHub_OnGameRoomUpdate(object sender, GameRoom gameRoom)
    {
        if (gameRoom == null || !GameHub.IsConnected)
            NavigationManager.NavigateTo($"/{GameCode}");
        
        StateHasChanged();
    }

    private void GameHub_OnGameCompletedEvent(object sender, GameRoom gameRoom)
    {
        NavigationManager.NavigateTo($"/score/{GameCode}");
        StateHasChanged();
    }

    private void GameHub_OnPlayerTurnWait(object sender, GameRoom gameRoom)
    {
        if (GameHub.Game.CurrentGame.TurnState == TurnState.Waiting && GameUtility.IsYouCurrentPlayerTurn(GameHub.You, GameHub.Game))
        {
            Task.Factory.StartNew(async () => await DialogService.ShowMessageBox(
                "Info",
                $"{LanguageManager.CurrentLanguage.GamePage.MsgYourTurn}",
                yesText: "Ok!"));
        }
        else if (GameHub.Game.CurrentGame.TurnState == TurnState.WaitingNextRound && GameUtility.IsYouCurrentPlayerTurn(GameHub.You, GameHub.Game))
        {
            Task.Factory.StartNew(async () => await DialogService.ShowMessageBox(
                "Info",
                $"{LanguageManager.CurrentLanguage.GamePage.MsgNextRound}",
                yesText: "Ok!"));
        }
        StateHasChanged();
    }

    private void GameHub_OnStartTimerEvent(object sender, EventArgs e)
    {
        isTimerEnabled = true;
        OnTimerRunning();
    }

    private void GameHub_OnStopTimerEvent(object sender, EventArgs e)
    {
        isTimerEnabled = false;
    }

    private void GameHub_OnResetTimerEvent(object sender, EventArgs e)
    {
        timeLeft = new TimeSpan(0, 0, GameHub.Game.Config.TimePerTurn);
        isTimerEnabled = false;
    }

    async void OnTimerRunning()
    {
        while (timeLeft.TotalSeconds > 0 && isTimerEnabled)
        {
            timeLeft = timeLeft.Add(new TimeSpan(0, 0, -1));
            StateHasChanged();
            await Task.Delay(1000);
        }

        // Timer end
        if (GameUtility.IsYouCurrentPlayerTurn(GameHub.You, GameHub.Game) && isTimerEnabled)
            await GameHub.EndTurnRequest();
    }

    async void OnStartTurnClick()
    {
        await GameHub.StartTurnRequest();
        currentSkippedWords.Clear();
        GetNextWord();
        StateHasChanged();
    }

    async void OnSkipWordClick()
    {
        if (GameHub.Game.CurrentGame.RemainingWords.Any())
        {
            currentSkippedWords.Add(GameHub.Game.CurrentGame.RemainingWords[currentWordIndex].Label, "");
            await GameHub.WordSkippedRequest(GameHub.Game.CurrentGame.RemainingWords[currentWordIndex].Label);
        }

        GetNextWord();
        StateHasChanged();
    }

    async void OnFoundWordClick()
    {
        _ = Task.Factory.StartNew(async () =>
        {
            isWordFoundButtonDisabled = true;
            StateHasChanged();
            await Task.Delay(Constants.Constant.Game.FoundWaitTimeMs);
            isWordFoundButtonDisabled = false;
            StateHasChanged();
        });

        if (GameHub.Game.CurrentGame.RemainingWords.Any())
        {
            var wordLabel = GameHub.Game.CurrentGame.RemainingWords[currentWordIndex].Label;
            GameHub.Game.CurrentGame.RemainingWords.RemoveAt(currentWordIndex);
            var (player, isTeamOne) = GameUtility.FindCorrespondingPlayer(GameHub.You.Id, GameHub.Game);            
            if (isTeamOne == true)
                GameHub.Game.TeamOne.Score += 1;
            else
                GameHub.Game.TeamTwo.Score += 1;

            GetNextWord();
            await GameHub.WordFoundRequest(GameHub.Game.TeamOne.Score, GameHub.Game.TeamTwo.Score, wordLabel);
        }       
        
        StateHasChanged();        
    }

    void GetNextWord()
    {
        if (!GameHub.Game.CurrentGame.RemainingWords.Any())
            return;

        if (GameHub.Game.CurrentGame.RemainingWords.Count <= currentSkippedWords.Count)
            currentSkippedWords.Clear();
        do
        {
            currentWordIndex = random.Next(GameHub.Game.CurrentGame.RemainingWords.Count);
            currentWord = GameHub.Game.CurrentGame.RemainingWords[currentWordIndex].Label;
        } while(currentSkippedWords.ContainsKey(currentWord));        
    }

    async void OnCopyGameUrl() 
    {
        await ClipboardService.WriteTextAsync(NavigationManager.BaseUri+GameHub.Game.Code);
        Snackbar.Add($"{LanguageManager.CurrentLanguage.CreateGamePage.GameUrlCopied}", Severity.Info);
    }

    async void OnCopyVideoUrl() 
    {
        Snackbar.Add($"{LanguageManager.CurrentLanguage.CreateGamePage.VideoUrlCopied}", Severity.Info);
        await ClipboardService.WriteTextAsync(GameHub.Game.Config.VideoUrl);
    }

    private async void NavigateToIndexComponent()
    {
        await GameHub.DisconnectFromGameHub();
        NavigationManager.NavigateTo($"/{GameCode}");
    }

    private void NavigateToGameComponent()
    {
        NavigationManager.NavigateTo($"/game/{GameCode}");
    }

    public new void Dispose()
    {
        GameHub.OnGameRoomUpdate -= GameHub_OnGameRoomUpdate;
        GameHub.OnStartTimerEvent -= GameHub_OnStartTimerEvent;
        GameHub.OnStopTimerEvent -= GameHub_OnStopTimerEvent;
        GameHub.OnResetTimerEvent -= GameHub_OnResetTimerEvent;
        GameHub.OnPlayerTurnWaitEvent -= GameHub_OnPlayerTurnWait;  
        GameHub.OnGameCompletedEvent -= GameHub_OnGameCompletedEvent;  
          
    }

    private string WordToDisplay()
    {
        if (GameUtility.IsYouCurrentPlayerTurn(GameHub.You, GameHub.Game) && GameHub.Game.CurrentGame.TurnState == TurnState.Playing)
        {
            return currentWord;
        }
        else if (!string.IsNullOrEmpty(GameHub.Game.CurrentGame?.LatestWordFound?.Label))
        {
             return "';..;'";
            //return GameHub.Game.CurrentGame.LatestWordFound.Label;
        }
        else
        {
           return "';..;'";
        }
    }

}