@page "/score/{gamecode}"
@inherits AppBaseComponent
@inject IJSRuntime js
@implements IDisposable
@inject NavigationManager NavigationManager
@inject GameHubService GameHub
@inject ClipboardService ClipboardService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

@if (GameHub.You != null)
{
<MudContainer MaxWidth="MaxWidth.Large" Class="mt-16">
    <MudText Typo="Typo.h4" Align="Align.Center" GutterBottom="true"><strong>@(GetWinningTitle())</strong></MudText>
    <MudText Align="Align.Center">@GameHub.Game.TeamOne.Score@LanguageManager.CurrentLanguage.ScorePage.Description@GameHub.Game.TeamTwo.Score</MudText>
    <br />    
    <MudItem Class="d-flex justify-center">
        <MudItem Class="d-inline-flex justify-center">
            <MudField Variant="Variant.Outlined" InnerPadding="true" FullWidth="false" Class="mx-auto">
                <MudItem Class="d-flex justify-center">
                    <MudButton Class="pa-2" Variant="@(mvp.Id.Equals(GameHub.You.Id) ? Variant.Filled : Variant.Outlined)" Style="@(mvp.Id.Equals(GameHub.You.Id) ? "background-color: "+@mvp.Color+"; color: black;" : "color: "+@mvp.Color+"; border: 1px solid "+ @mvp.Color +";")">@mvp.Name</MudButton>
                    <MudText Class="pa-2" Align="Align.Center"><strong> @LanguageManager.CurrentLanguage.ScorePage.Mvp 🚀🚀🚀</strong></MudText>
                </MudItem>
                <MudItem Class="d-flex justify-center">        
                    <MudText Class="pa-2" Align="Align.Center">@mvp.WordFound@LanguageManager.CurrentLanguage.ScorePage.WordFound</MudText>
                    <MudText Class="pa-2" Align="Align.Center">@mvp.WordSkipped@LanguageManager.CurrentLanguage.ScorePage.WordSkip</MudText>
                </MudItem>
            </MudField>
        </MudItem>
    </MudItem>
    <br />
    <br />
    <MudGrid Class="mt-4" Justify="Justify.SpaceAround">        
        <MudItem xs="12" sm="6" md="6" Class="mx-auto">
            <MudItem Class="d-flex flex-column justify-start">
                <MudText Typo="Typo.h5" Align="Align.Center" GutterBottom="true"><strong>@GameHub.Game.TeamOne.Name</strong></MudText>
                <MudItem Class="mx-auto">
                    <MudItem Class="d-flex justify-center">
                        <MudButton Class="pa-2" Variant="@(teamOneMvp.Id.Equals(GameHub.You.Id) ? Variant.Filled : Variant.Outlined)" Style="@(teamOneMvp.Id.Equals(GameHub.You.Id) ? "background-color: "+@teamOneMvp.Color+"; color: black;" : "color: "+@teamOneMvp.Color+"; border: 1px solid "+ @teamOneMvp.Color +";")">@teamOneMvp.Name</MudButton>
                        <MudText Class="pa-2" Align="Align.Center"><strong>@LanguageManager.CurrentLanguage.ScorePage.TeamChampion</strong></MudText>
                    </MudItem>
                    <MudItem Class="d-flex justify-center">        
                        <MudText Class="pa-2" Align="Align.Center">@teamOneMvp.WordFound@LanguageManager.CurrentLanguage.ScorePage.WordFound</MudText>
                        <MudText Class="pa-2" Align="Align.Center">@teamOneMvp.WordSkipped@LanguageManager.CurrentLanguage.ScorePage.WordSkip</MudText>
                    </MudItem>
                    <MudItem>
                        <MudChart ChartType="ChartType.Bar" ChartOptions="chartOptions" ChartSeries="@SeriesTeamOne" XAxisLabels="@XAxisLabelsTeamOne" Width="90%" Height="350px"></MudChart>
                    </MudItem>
                </MudItem>
            </MudItem>
        </MudItem>
        <MudItem xs="12" sm="6" md="6" Class="mx-auto">
            <MudItem Class="d-flex flex-column justify-start">
                <MudText Typo="Typo.h5" Align="Align.Center" GutterBottom="true"><strong>@GameHub.Game.TeamTwo.Name</strong></MudText>
                <MudItem Class="mx-auto">
                    <MudItem Class="d-flex justify-center">
                        <MudButton Class="pa-2" Variant="@(teamTwoMvp.Id.Equals(GameHub.You.Id) ? Variant.Filled : Variant.Outlined)" Style="@(teamTwoMvp.Id.Equals(GameHub.You.Id) ? "background-color: "+@teamTwoMvp.Color+"; color: black;" : "color: "+@teamTwoMvp.Color+"; border: 1px solid "+ @teamTwoMvp.Color +";")">@teamTwoMvp.Name</MudButton>
                        <MudText Class="pa-2" Align="Align.Center"><strong>@LanguageManager.CurrentLanguage.ScorePage.TeamChampion</strong></MudText>
                    </MudItem>
                    <MudItem Class="d-flex justify-center">        
                        <MudText Class="pa-2" Align="Align.Center">@teamTwoMvp.WordFound@LanguageManager.CurrentLanguage.ScorePage.WordFound</MudText>
                        <MudText Class="pa-2" Align="Align.Center">@teamTwoMvp.WordSkipped@LanguageManager.CurrentLanguage.ScorePage.WordSkip</MudText>
                    </MudItem>
                    <MudItem>
                        <MudChart ChartType="ChartType.Bar" ChartOptions="chartOptions" ChartSeries="@SeriesTeamTwo" XAxisLabels="@XAxisLabelsTeamTwo" Width="90%" Height="350px"></MudChart>
                    </MudItem>
                </MudItem>
            </MudItem>
        </MudItem>
    </MudGrid>
    <br />
    <br />
    <MudGrid Class="" Justify="Justify.Center">
        <MudItem xs="12" sm="12" md="12">
            <MudText Typo="Typo.h5" Align="Align.Center" GutterBottom="true">@LanguageManager.CurrentLanguage.ScorePage.TableTitle</MudText>
            <MudTable Items="@Elements" Hover="true" SortLabel="Sort By">
                <HeaderContent>
                    <MudTh><MudTableSortLabel SortBy="new Func<ScoreTableRow, object>(x=>x.Label)">@LanguageManager.CurrentLanguage.ScorePage.TableWord</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<ScoreTableRow, object>(x=>x.WrittenBy)">@LanguageManager.CurrentLanguage.ScorePage.TableWrittenBy</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<ScoreTableRow, object>(x=>x.TimesSkipped)">@LanguageManager.CurrentLanguage.ScorePage.TableTimesSkipped</MudTableSortLabel></MudTh>                    
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Nr">@context.Label</MudTd>
                    <MudTd DataLabel="Sign">@context.WrittenBy</MudTd>
                    <MudTd DataLabel="Name">@context.TimesSkipped</MudTd>
                </RowTemplate>
            </MudTable>
        </MudItem>
    </MudGrid>
    <MudGrid Class="" Justify="Justify.Center">
        <MudItem xs="12" sm="12" md="12">
            <MudButton Variant="Variant.Outlined" Color="Color.Tertiary" OnClick="NavigateToIndexComponent" Class="pa-2 ml-2 mr-auto">@LanguageManager.CurrentLanguage.GameLobbyPage.Leave</MudButton>
        </MudItem>
    </MudGrid>
</MudContainer>
}
@code {
    [Parameter]
    public string GameCode { get; set; }

    Player mvp = new Player();
    Player teamOneMvp = new Player();
    Player teamTwoMvp = new Player();

    ChartOptions chartOptions = new ChartOptions();
    List<ChartSeries> SeriesTeamOne = new List<ChartSeries>();
    List<ChartSeries> SeriesTeamTwo = new List<ChartSeries>();
    string[] XAxisLabelsTeamOne = { };
    string[] XAxisLabelsTeamTwo = { };

    List<ScoreTableRow> Elements = new List<ScoreTableRow>();


    protected override void OnParametersSet()
    {
        Console.WriteLine(ObjectDumper.Dump(GameHub.You));
        if (GameHub.You == null)
        {
            NavigationManager.NavigateTo($"/{GameCode}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (GameHub.Game == null || !GameHub.IsConnected)
            NavigationManager.NavigateTo($"/{GameCode}");
        else
        {
            GameHub.OnGameRoomUpdate += GameHub_OnGameRoomUpdate;

            chartOptions.YAxisTicks = 2;
            teamOneMvp = GameHub.Game.TeamOne.Players.OrderByDescending(x => x.WordFound).ThenBy(x => x.WordSkipped).FirstOrDefault() ?? new Player();
            teamTwoMvp = GameHub.Game.TeamTwo.Players.OrderByDescending(x => x.WordFound).ThenBy(x => x.WordSkipped).FirstOrDefault() ?? new Player();
            teamOneMvp = GameHub.Game.TeamOne.Players.OrderByDescending(x => x.WordFound).ThenBy(x => x.WordSkipped).FirstOrDefault() ?? new Player();

            if (teamOneMvp.WordFound == teamTwoMvp.WordFound)
            {
                if (teamOneMvp.WordSkipped == teamTwoMvp.WordSkipped)
                    mvp = GameHub.Game.TeamOne.Score > GameHub.Game.TeamTwo.Score ? teamOneMvp : teamTwoMvp;
                else
                    mvp = teamOneMvp.WordSkipped < teamTwoMvp.WordSkipped ? teamOneMvp : teamTwoMvp;
            }
            else
                mvp = teamOneMvp.WordFound > teamTwoMvp.WordFound ? teamOneMvp : teamTwoMvp;

            XAxisLabelsTeamOne = GameHub.Game.TeamOne.Players.Select(x => x.Name).ToArray();
            XAxisLabelsTeamTwo = GameHub.Game.TeamTwo.Players.Select(x => x.Name).ToArray();

            var wordFoundTeamOne = GameHub.Game.TeamOne.Players.Select(x => (double)x.WordFound).ToArray();
            var wordSkippedTeamOne = GameHub.Game.TeamOne.Players.Select(x => (double)x.WordSkipped).ToArray();
            var wordFoundTeamTwo = GameHub.Game.TeamTwo.Players.Select(x => (double)x.WordFound).ToArray();
            var wordSkippedTeamTwo = GameHub.Game.TeamTwo.Players.Select(x => (double)x.WordSkipped).ToArray();

            SeriesTeamOne.Add(new ChartSeries() { Name = LanguageManager.CurrentLanguage.ScorePage.WordFoundLegend, Data = wordFoundTeamOne });
            SeriesTeamOne.Add(new ChartSeries() { Name = LanguageManager.CurrentLanguage.ScorePage.WordSkipLegend, Data = wordSkippedTeamOne });
            SeriesTeamTwo.Add(new ChartSeries() { Name = LanguageManager.CurrentLanguage.ScorePage.WordFoundLegend, Data = wordFoundTeamTwo });
            SeriesTeamTwo.Add(new ChartSeries() { Name = LanguageManager.CurrentLanguage.ScorePage.WordSkipLegend, Data = wordSkippedTeamTwo });

            Elements.AddRange(GameHub.Game.TeamOne.Players.SelectMany(x => x.WrittenWords.Select(y => new ScoreTableRow { WrittenBy = x.Name, Label = y.Label, TimesSkipped = y.TimeSkipped }).Where(x => !string.IsNullOrEmpty(x.Label))).ToList());
            Elements.AddRange(GameHub.Game.TeamTwo.Players.SelectMany(x => x.WrittenWords.Select(y => new ScoreTableRow { WrittenBy = x.Name, Label = y.Label, TimesSkipped = y.TimeSkipped }).Where(x => !string.IsNullOrEmpty(x.Label))).ToList());
        }
    }

    private void GameHub_OnGameRoomUpdate(object sender, GameRoom gameRoom)
    {
        if (gameRoom == null || !GameHub.IsConnected)
            NavigationManager.NavigateTo($"/{GameCode}");
        
        StateHasChanged();
    }

    string GetWinningTitle()
    {
        if (GameHub.Game.TeamOne.Score > GameHub.Game.TeamTwo.Score)
        {
            return $"{GameHub.Game.TeamOne.Name}{@LanguageManager.CurrentLanguage.ScorePage.Title}";
        }
        else if (GameHub.Game.TeamOne.Score < GameHub.Game.TeamTwo.Score)
        {
            return $"{GameHub.Game.TeamTwo.Name}{@LanguageManager.CurrentLanguage.ScorePage.Title}";
        }
        else
        {
            return $"{@LanguageManager.CurrentLanguage.ScorePage.Tie}";
        }
    }

    private async void NavigateToIndexComponent()
    {
        await GameHub.DisconnectFromGameHub();
        NavigationManager.NavigateTo($"/{GameCode}");
    }


    public new void Dispose()
    {
        GameHub.OnGameRoomUpdate -= GameHub_OnGameRoomUpdate;
    }
}
