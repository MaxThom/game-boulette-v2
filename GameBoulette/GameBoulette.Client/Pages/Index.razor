@inherits AppBaseComponent
@implements IDisposable
@page "/{gamecode?}"
@inject NavigationManager NavigationManager
@inject IJSRuntime js
@inject GameHubService GameHub
@inject ISnackbar Snackbar
@inject ILocalStorageService localStorage
@inject IWebAssemblyHostEnvironment hostEnv

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-16">
    <MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true"><strong>@LanguageManager.CurrentLanguage.IndexPage.Title</strong></MudText>
    <MudGrid Class="mt-4" Justify="Justify.Center">        
        <MudItem xs="12" sm="10" md="8">
            <MudCard Elevation="25" Class="rounded-lg pb-4 mb-2">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6" Align="Align.Center">@LanguageManager.CurrentLanguage.IndexPage.AvatarTitle</MudText>
                    </CardHeaderContent>                   
                </MudCardHeader>
                <MudCardContent  Class="d-flex justify-center">                    
                    <MudButton Variant="Variant.Filled" Style="@("background-color: "+player.Color+"; color: black;")">@player.Name</MudButton>
                    <MudTextField Class="px-5" Label="@LanguageManager.CurrentLanguage.IndexPage.AvatarInput" Variant="Variant.Outlined" @bind-Value="player.Name" Immediate="true"></MudTextField>                    
                </MudCardContent>
                <MudCardContent  Class="d-flex justify-space-around py-2 px-1 "> 
                    <MudFab Class="px-auto" Style="background-color: #f4ff00;" Size="Size.Small" OnClick="@(() => player.Color = "#f4ff00")" />
                    <MudFab Class="px-auto" Style="background-color: #594ae2;" Size="Size.Small" OnClick="@(() => player.Color = "#594ae2")" />
                    <MudFab Class="px-auto" Style="background-color: #ff4081;" Size="Size.Small" OnClick="@(() => player.Color = "#ff4081")" />                    
                    <MudFab Class="px-auto" Style="background-color: #1ec8a5;" Size="Size.Small" OnClick="@(() => player.Color = "#1ec8a5")" />
                    <MudFab Class="px-auto" Style="background-color: #2196f3;" Size="Size.Small" OnClick="@(() => player.Color = "#2196f3")" />
                    <MudFab Class="px-auto" Style="background-color: #00c853;" Size="Size.Small" OnClick="@(() => player.Color = "#00c853")" />
                    <MudFab Class="px-auto" Style="background-color: #ff9800;" Size="Size.Small" OnClick="@(() => player.Color = "#ff9800")" />
                    <MudFab Class="px-auto" Style="background-color: #f44336;" Size="Size.Small" OnClick="@(() => player.Color = "#f44336")" />
                    <MudFab Class="px-auto" Style="background-color: #ffffff;" Size="Size.Small" OnClick="@(() => player.Color = "#ffffff")" />
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
    <MudGrid Class="" Justify="Justify.Center">   
        <MudItem xs="12" sm="5" md="4">
            <MudCard Elevation="25" Class="rounded-lg pb-4" Style="min-height:480px;">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6" Align="Align.Center">Rejoindre</MudText>
                    </CardHeaderContent>                   
                </MudCardHeader>
                <MudCardActions Class="d-flex justify-center mt-2 mb-n2">
                    <MudTextField @bind-Value="GameCode" Margin="Margin.Dense" Label="@LanguageManager.CurrentLanguage.IndexPage.JoinGameCode" Variant="Variant.Outlined" Immediate="true"></MudTextField>
                </MudCardActions>
                <MudCardActions Class="d-flex justify-center pt-5">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="" FullWidth="true" OnClick="() => OnJoinGameClick()" Disabled="@(player.Name.Trim().Length < 3 || !GameUtility.IsGameCodeValid(GameCode))">@LanguageManager.CurrentLanguage.IndexPage.JoinGame</MudButton>
                </MudCardActions>                
                <MudCardHeader Class=""> 
                    <CardHeaderContent>
                        <MudCardMedia Image="images/join.png" Height="150" Style="width:150px" Class="mt-10 mx-auto" />
                    </CardHeaderContent>
                </MudCardHeader>                             
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="5" md="4">
            <MudCard Elevation="25" Class="rounded-lg pb-4">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6" Align="Align.Center">Créer</MudText>
                    </CardHeaderContent>                   
                </MudCardHeader>
                <MudCardContent>
                    <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors" Class="">
                        <MudTextField Class="pb-3" Margin="Margin.Dense" T="string" @bind-Value="config.Name" Label="@LanguageManager.CurrentLanguage.CreateGamePage.GameName" Variant="Variant.Outlined" Required="true" RequiredError="@LanguageManager.CurrentLanguage.CreateGamePage.MissingField" Immediate="true"/>
                        <MudTextField Class="pb-3" Margin="Margin.Dense" T="string" @bind-Value="config.Theme" Label="@LanguageManager.CurrentLanguage.CreateGamePage.GameTheme" Variant="Variant.Outlined" />            
                        <MudNumericField Class="pb-3" Margin="Margin.Dense" @bind-Value="config.NumberOfRound" Label="@LanguageManager.CurrentLanguage.CreateGamePage.NumberOfRound" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentText="@LanguageManager.CurrentLanguage.CreateGamePage.Rounds" Required="true" RequiredError="@LanguageManager.CurrentLanguage.CreateGamePage.MissingField"/> 
                        <MudNumericField Class="pb-3" Margin="Margin.Dense" @bind-Value="config.TimePerTurn" Label="@LanguageManager.CurrentLanguage.CreateGamePage.TimePerTurn" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentText="@LanguageManager.CurrentLanguage.CreateGamePage.Seconds" Required="true" RequiredError="@LanguageManager.CurrentLanguage.CreateGamePage.MissingField"/>                        
                        <MudNumericField Class="pb-3" Margin="Margin.Dense" @bind-Value="config.NumberOfPaperPerPerson" Label="@LanguageManager.CurrentLanguage.CreateGamePage.NumberOfPaper" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentText="@LanguageManager.CurrentLanguage.CreateGamePage.Papers" Required="true" RequiredError="@LanguageManager.CurrentLanguage.CreateGamePage.MissingField"/>                        
                        <MudTextField T="string" Margin="Margin.Dense" Label="@LanguageManager.CurrentLanguage.CreateGamePage.VideoURL" Variant="Variant.Outlined" />                        
                    </MudForm>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" OnClick="OnCreateGameClick" Class="mx-auto mt-3" FullWidth="true">@LanguageManager.CurrentLanguage.CreateGamePage.Create</MudButton>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="10" md="8">
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" FullWidth="true">@LanguageManager.CurrentLanguage.IndexPage.Instruction</MudButton>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    [Parameter]
    public string GameCode { get; set; }

    bool success;
    string[] errors = { };
    MudForm form;

    Player player = new Player()
    {
        Name = "",
        Color = "#ffffff",
    };
    
    Configuration config = new Configuration()
    {
        Name = "Test",
        Theme = "all",
        NumberOfRound = 3,
        TimePerTurn = 60,
        NumberOfPaperPerPerson = 5,
        VideoUrl = "",
    };

    protected override void OnParametersSet()
    {
        GameCode = GameCode ?? "";        
    }

    protected override async void OnInitialized()
    {
        base.OnInitialized();
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;

        GameHub.OnGameRoomUpdate += GameHub_OnGameRoomUpdate;

        player.Name = await localStorage.GetItemAsync<string>(Constants.Constant.LocalStorage.NameKey) ?? "";
        player.Color = await localStorage.GetItemAsync<string>(Constants.Constant.LocalStorage.ColorKey) ?? "#ffffff";

        // Check for player guid in storage, else new guid
        if (hostEnv.IsDevelopment())
        {
            player.Id = Guid.NewGuid();
        }
        else
        {
            player.Id = await localStorage.GetItemAsync<Guid>(Constants.Constant.LocalStorage.IdKey);
            if (player.Id == Guid.Empty)
            {
                player.Id = Guid.NewGuid();
                await localStorage.SetItemAsync<Guid>(Constants.Constant.LocalStorage.IdKey, player.Id);
            }            
        }
        StateHasChanged();
    }

    private async Task OnCreateGameClick()
    {
        await localStorage.SetItemAsync<string>(Constants.Constant.LocalStorage.NameKey, player.Name);
        await localStorage.SetItemAsync<string>(Constants.Constant.LocalStorage.ColorKey, player.Color);
        (bool isConnected, string msg) = await GameHub.CreateGameConnection(config, player);
        if (!isConnected)
        {
            // Not connected
            Snackbar.Add(msg, Severity.Error);
        }

        Snackbar.Add(msg, Severity.Info);
    }

    private async Task OnJoinGameClick()
    {
        await localStorage.SetItemAsync<string>(Constants.Constant.LocalStorage.NameKey, player.Name);
        await localStorage.SetItemAsync<string>(Constants.Constant.LocalStorage.ColorKey, player.Color);
        (bool isConnected, string msg) = await GameHub.JoinGameConnection(GameCode, player);
        if (!isConnected)
        {
            // Not connected
            Snackbar.Add(msg, Severity.Error);
        }

        Snackbar.Add(msg, Severity.Info);
    }    

    private void GameHub_OnGameRoomUpdate(object sender, GameRoom gameRoom)
    {
        Snackbar.Clear();
        if (gameRoom == null)
            Snackbar.Add("Can't connect to lobby !", Severity.Error);
        else
        {
            Snackbar.Add("Connected to lobby !", Severity.Success);
            NavigationManager.NavigateTo($"lobby/{gameRoom.Code}");    
        }        
    }

    public new void Dispose()
    {
        GameHub.OnGameRoomUpdate -= GameHub_OnGameRoomUpdate;
    }
}